{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home|\u4e3b\u9875","text":""},{"location":"#welcome-to-ruri-official-wiki","title":"Welcome to ruri official wiki","text":""},{"location":"#choose-your-language","title":"Choose your language/\u9009\u62e9\u60a8\u7684\u8bed\u8a00:","text":"<ul> <li>English </li> <li>\u7b80\u4f53\u4e2d\u6587 </li> </ul>"},{"location":"#about-ruri","title":"About ruri:","text":"<p>\u2003ruri is pronounced as <code>luli</code>, or you can call it <code>[\u7460\u7483/\u7409\u7483]</code> (\u308b\u308a) in Chinese or Japanese as well.      \u2003ruri is acronym to Lightweight, User-friendly Linux-container Implementation.        \u2003ruri is a powerful container implementation that runs on almost any Linux device, even with incomplete kernel configurations or minimal storage space.           </p>"},{"location":"#performance","title":"Performance:","text":"<p>On AMD Ryzen 5 5500U, Windows 11, Ubuntu 22.04.5 WSL 2     <pre><code># uname -m\nx86_64\n# /usr/bin/time -f \"Time: %E\\nMax memory: %M KB\" ./ruri ../t /bin/true\nTime: 0:00.01\nMax memory: 860 KB</code></pre></p>"},{"location":"#binary-sizeamd64","title":"Binary size(amd64):","text":"ruri crun % (noupx) 372K 3.0M -87.6% (withupx) 136K 1.3M -89.5%"},{"location":"#why-ruri","title":"Why ruri:","text":"<ul> <li>Powerful Features<ul> <li>Basic container features are all supported, chroot, unshare with pivot_root, capability control, basic cgroup support, no_new_privs, auto set environment variables and change user/workdir, built-in seccomp profile, run rootless container, and even more...      </li> <li>Built-in support for binfmt_misc &amp; QEMU, so you can run multi-arch container easily.</li> <li>Powerful mount option, you can mount image/partition as root, and you can choose every mountpoint to be read-only or rw.     </li> <li>Built-in support for config file.</li> </ul> </li> <li>Ultra-lightweight, Zero runtime Dependencies, Ready Out-of-the-Box<ul> <li>Only rootless container need an optional runtime dependency <code>uidmap</code>, all feature of chroot/unshare container can be built-in to an all-in-one binary.            </li> <li>Ruri provides statically linked binaries for most Linux devices.   </li> <li>The binary of ruri is very small, after upx, it can even be less than 200k, but it can provide over 30 options and even more features.       </li> </ul> </li> <li>Flexibility, for More Platform<ul> <li>From Android devices to IoT gadgets, from amd64 to s390x, ruri can provide basic container support on almost every Linux platforms, the only thing it need is root privilege.      </li> </ul> </li> <li>Secure by Design <ul> <li>Built-in rootless container support.      </li> <li>Built-in security options, to make container more secure.      </li> <li>Built-in read-only filesystem options for more protection.          </li> </ul> </li> <li>Simple for Beginner<ul> <li>You can just use ruri as an instead of <code>chroot</code> command, and ruri will do all things for you.      </li> <li>Ruri empowers you with the freedom to configure everything, but that do not means you need to learn every option to use it. </li> </ul> </li> </ul>"},{"location":"#license","title":"License:","text":"<p>License of ruri: </p> <ul> <li>Licensed under the MIT License      </li> <li>Copyright (c) 2022-2024 Moe-hacker      </li> </ul> <p>License of clang-format config file:     </p> <ul> <li>GPL-2.0  </li> </ul> <p>Made with Material for MkDocs</p>"},{"location":"en/","title":"Welcome to ruri official wiki","text":""},{"location":"en/#table-of-contents","title":"Table of contents:","text":"<ul> <li>Quick start</li> <li>Common Usage </li> <li>Container Security </li> <li>Mounting System Resources </li> <li>FAQ</li> </ul>"},{"location":"en/#about-ruri","title":"About ruri:","text":"<p>\u2003ruri is pronounced as <code>luli</code>, or you can call it <code>[\u7460\u7483/\u7409\u7483]</code> (\u308b\u308a) in Chinese or Japanese as well.      \u2003ruri is acronym to Lightweight, User-friendly Linux-container Implementation.        \u2003ruri is a powerful container implementation that runs on almost any Linux device, even with incomplete kernel configurations or minimal storage space.           </p>"},{"location":"en/common-usage/","title":"Common Usage","text":""},{"location":"en/common-usage/#about-pervileges","title":"About pervileges\uff1a","text":"<p>Most function of ruri needs to be run with root (sudo), except rootless part.           </p>"},{"location":"en/common-usage/#stop-container","title":"Stop container\uff1a","text":"<p>You can use <code>-U [CONTAINER_DIR/config]</code>to umount a container and try to kill all processes in it.             </p>"},{"location":"en/common-usage/#enable-unshare","title":"Enable unshare\uff1a","text":"<p>You can use <code>-u</code> option to enable unshare, this will not break container in most of the time and it will provide better security.           </p>"},{"location":"en/common-usage/#capability-control","title":"capability control\uff1a","text":"<p>ruri have built-in capability control function\uff0cyou can use<code>-k capability</code> to keep a cpability\uff0cuse <code>-d capability</code> to drop. Note that capability should be lower-case.          </p>"},{"location":"en/common-usage/#mount-dir-from-host","title":"mount dir from host\uff1a","text":"<p>You can use <code>-m /sdcard /sdcard</code> to mount /sdcard into container.            </p>"},{"location":"en/common-usage/#network-problem","title":"Network problem\uff1a","text":"<p>You might found error like <code>temporary failure resolving xxxxx</code> or <code>bad address xxxxx</code>.   Try to run the following command in container\uff1a     <pre><code>rm /etc/resolv.conf\necho nameserver 1.1.1.1 &gt; /etc/resolv.conf</code></pre> Or for android, try running https://github.com/Moe-hacker/daijin/raw/refs/heads/main/src/share/fixup.sh in container.           </p>"},{"location":"en/common-usage/#about-rootless-container","title":"About rootless container\uff1a","text":"<p>If you have error like <code>Couldn't create temporary file /tmp/apt.conf.sIKx3J for passing config to apt-key</code> please <code>chmod 777 /tmp</code>\u3002  Please install uidmap before you use rootless container.        You might need to configure /etc/subuid and /etc/subgid\u3002       </p>"},{"location":"en/container-security/","title":"Enhance Container Security:","text":"<p>Here are several ways to enhance the security of ruri container, kindly read this document before using ruri.      </p>"},{"location":"en/container-security/#regular","title":"Regular:","text":""},{"location":"en/container-security/#run-rootless-container","title":"Run rootless container:","text":"<p>If your device supports user ns, you can install uidmap and use <code>-r</code> option with common user, so that you can avoid using root privileges to run the container.      </p>"},{"location":"en/container-security/#run-command-in-container-with-common-user","title":"Run command in container with common user:","text":"<p>If you can not run rootless container, there's another choice, add a common user in your container and use <code>-E username</code> to run command as common user instead root.     If you don't need any privileges, it's better to enable no_new_privs at the same time.      </p>"},{"location":"en/container-security/#capabilities","title":"Capabilities:","text":"<p>Ruri will automatically drop unneeded capabilities, but ruri also provides capability control function, you can read capabilities(7) and use <code>-d</code> option to filter out unnecessary capabilities in container.      </p>"},{"location":"en/container-security/#disable-rurienv","title":"Disable .rurienv:","text":"<p>Ruri will create the file /.rurienv in container, to avoid security issues, this file is immutable and read-only.     But you can also disable creating it using <code>-N</code> option.      </p>"},{"location":"en/container-security/#set-memory-limit","title":"Set memory limit:","text":"<p>Ruri supports memory cgroup, you can use <code>-l</code> option to set the limit of memory usage.      </p>"},{"location":"en/container-security/#enable-unshare","title":"Enable unshare:","text":"<p>Ruri supports unshare, it's recommended to enable this feature for better security.     Unshare container will use pivot_root(2) instead chroot(2), so it's more secure.      </p>"},{"location":"en/container-security/#mount-other-mountpoints-as-read-only","title":"Mount other mountpoints as read-only:","text":"<p>Ruri supports using <code>-m</code> option to mount other device/img/dir into container, if you only need read access to the mountpoint, try using <code>-M</code> option to make them read-only.      </p>"},{"location":"en/container-security/#geek","title":"Geek:","text":""},{"location":"en/container-security/#seccomp","title":"Seccomp:","text":"<p>Ruri has a built-in Seccomp profile, you can enable it by using <code>-s</code> option.     If this profile does not fit your needs, you can edit src/seccomp.c and write your own Seccomp rules.      </p>"},{"location":"en/container-security/#radical","title":"Radical:","text":""},{"location":"en/container-security/#hidepid","title":"hidepid:","text":"<p>Ruri supports mount /proc with hidepid option, use <code>-i 1/2</code> to enable it.      </p>"},{"location":"en/container-security/#no-new-privs","title":"No new privs:","text":"<p>Ruri supports enable no_new_privs bit by <code>-n</code> option, after enabling this, command like <code>sudo</code> will be unavailable for common user.      </p>"},{"location":"en/container-security/#mount-as-read-only","title":"Mount / as read-only:","text":"<p>Ruri supports mounting the rootfs of container as read-only by using <code>-R</code> option, this will make all the container read-only.      </p>"},{"location":"en/container-security/#do-not-create-runtime-dirs","title":"Do not create runtime dirs:","text":"<p>/dev, /proc and /sys will not be mounted if you enable <code>-j</code> option.      </p>"},{"location":"en/container-security/#disable-network","title":"Disable network:","text":"<p>You can use <code>-x</code> option to create a new net ns and disable network for container. This needs net ns and will auto enable unshare.          </p>"},{"location":"en/container-security/#other-built-in-protections","title":"Other built-in protections:","text":""},{"location":"en/container-security/#devices-in-dev","title":"Devices in /dev.","text":"<p>For /dev, ruri will only create necessary devices on it,  so that block devices will always be unavailable in container, and as cap_mknod and cap_sys_admin is dropped by default, you can not escape from ruri container by modifying disk partitions.      </p>"},{"location":"en/container-security/#masked-dirs","title":"Masked dirs:","text":"<p>Ruri will mask some directories with tmpfs in /proc and /sys, this can protect the host to avoid security issues.      </p>"},{"location":"en/container-security/#capabilities_1","title":"Capabilities:","text":"<p>Ruri will drop unneeded capabilities by default, so that it can avoid escaping from container.      </p>"},{"location":"en/faq/","title":"<code>-P</code> option cannot show the process:","text":"<p>Since ruri use pivot_root() for unshare container for better security,     if your device does not support PID ns,     we cannot get process info by reading the link /proc/$PID/root, because after pivot_root, it will always be <code>/</code> </p>"},{"location":"en/faq/#network-issue","title":"Network issue:","text":"<p>You might have <code>temporary failure resolving xxxxx</code> or <code>bad address xxxxx</code>.     Try:      <pre><code>rm /etc/resolv.conf\necho nameserver 1.1.1.1 &gt; /etc/resolv.conf</code></pre> Or, for Android, run https://github.com/Moe-hacker/daijin/raw/refs/heads/main/src/share/fixup.sh in container.</p>"},{"location":"en/faq/#about-container-environment","title":"About container environment:","text":"<p>For safety, ruri container is like default docker container, it will mask some directory in /sys and /proc, drop unneed capabilities, and you are not able to run command like mknod or mount by default.      </p>"},{"location":"en/faq/#about-capability","title":"About capability:","text":"<p>ruri will set capability to the same as docker common container by default, you can use <code>-k [cap]</code> or <code>-d [cap]</code> to change the capability settings.     For example, use <code>-d cap_sys_admin</code> to drop CAP_SYS_ADMIN.     In fulture, maybe new caps will be added to the kernel, and their name might cannot be recognized if you are using old builds. You can use the value of cap (use <code>capsh  --explain=[cap]</code> to get the value) to drop it, for example, use <code>-d 114</code> to drop the cap 114 (I don't know what the cap should be, mabe can make superuser to be a homo).</p>"},{"location":"en/faq/#about-config","title":"About config:","text":"<p>Since v3.0, ruri can use k2v, a new simple config format, to store the config of a container.          </p>"},{"location":"en/faq/#about-rurienv","title":"About rurienv:","text":"<p>Since v3.0, ruri removed the daemon, it use a new way to store the info of a running container.        ruri will creat <code>/.rurienv</code> file into the container, to store runtime info of container.         The rurienv file is automatically controled by ruri, please do not edit it.      </p>"},{"location":"en/faq/#about-tty","title":"About tty:","text":"<p>The command <code>tty</code> in ruri might say that \"not a tty\".     If you need to run some program like <code>gpg</code>, please use <code>script -q -O /dev/null</code> in container.      </p>"},{"location":"en/faq/#about-runtime-dirs","title":"About runtime dirs:","text":"<p>ruri will create /dev/, /sys/ and /proc/ after chroot(2) into container for better security. You can use <code>-S</code> option to force it to bind-mount system runtime dirs.      </p>"},{"location":"en/faq/#about-multi-arch-container","title":"About multi-arch container:","text":"<p>Yes, you can run multi-arch containers via ruri if your device support.     It needs CONFIG_BINFMT_MISC enabled in your kernel config.     You need to copy qemu-*-static to your container first.     The path of qemu is the absolute path of qemu binary in the chroot container, for example, you have a qemu binary at <code>/path/to/container/qemu-amd64-static</code>, use <code>-a x86_64 -q /qemu-amd64-static</code> arguments to start the container.</p>"},{"location":"en/faq/#about-rootless-container","title":"About rootless container:","text":"<p>If you get error like <code>Couldn't create temporary file /tmp/apt.conf.sIKx3J for passing config to apt-key</code> in container, please <code>chmod 777 /tmp</code>.     You need uidmap installed in your host.     You might need /etc/subuid and /etc/subgid configured in your host.       </p>"},{"location":"en/faq/#about-seccomp","title":"About Seccomp:","text":"<p>The seccomp rule of ruri is based on Docker's default seccomp profile. ruri does not provide the way to change it, but you can edit src/seccomp.c and rewrite setup_seccomp() with your own config.      </p>"},{"location":"en/mount-resources/","title":"Mounting System Resources","text":""},{"location":"en/mount-resources/#mounting-files","title":"Mounting Files:","text":"<p>Ruri has powerful built-in mounting options. You can use <code>-m</code> to mount a file, and <code>-M</code> to mount it as read-only.     </p>"},{"location":"en/mount-resources/#directories","title":"Directories:","text":"<p>For example, <code>-m /sdcard /sdcard</code> mounts the host machine\u2019s /sdcard to the container\u2019s /sdcard. However, this is not secure. The recommended approach is to use <code>-M /sdcard /sdcard</code> for read-only mounting.      </p>"},{"location":"en/mount-resources/#block-devices","title":"Block Devices:","text":"<p>For example, you can use <code>-m /dev/sda /mnt</code> to mount /dev/sda to /mnt.      </p>"},{"location":"en/mount-resources/#image-files","title":"Image Files:","text":"<p>For example, you can use <code>-m ./1.img /mnt</code> to mount ./1.img to /mnt.      </p>"},{"location":"en/mount-resources/#root-directory","title":"Root Directory:","text":"<p>Use <code>-m resource /</code> to pre-mount the root directory. For instance, <code>-m ./rootfs.img /</code> can mount ./rootfs.img as the container\u2019s root directory.      </p>"},{"location":"en/mount-resources/#other-files","title":"Other Files:","text":"<p>Ruri also supports mounting individual files. For example, <code>-m /tmp/1.sock /tmp/1.sock</code> is theoretically possible.      </p>"},{"location":"en/mount-resources/#adding-character-devices","title":"Adding Character Devices:","text":"<p>Ruri supports adding character devices under /dev using <code>-I filename major_number minor_number</code>. For example, <code>-I kvm 10 232</code> or <code>-I dri/card0 226 0</code>.       </p>"},{"location":"en/quickstart/","title":"Quickstart:","text":""},{"location":"en/quickstart/#get-ruri","title":"Get ruri\uff1a","text":"<p>ruri provides binary for arm64, armv7, armhf, riscv64, i386, loong64, s390x, ppc64le and x86_64 platform\uff0cYou can use the following command to download ruri as ./ruri:      <pre><code>wget -q -O - https://getruri.crack.moe | bash -s -- -s</code></pre></p>"},{"location":"en/quickstart/#get-a-rootfs","title":"Get a rootfs\uff1a","text":""},{"location":"en/quickstart/#use-rurimarecommend","title":"Use rurima\uff08Recommend\uff09\uff1a","text":"<p>Get alpine edge image:    <pre><code>wget -q -O - https://getrurima.crack.moe | bash -s -- -s\nsudo ./rurima lxc pull -o alpine -v edge -s ./test </code></pre> BTW, rurima have a built-in ruri, so you can also use <code>rurima r</code> instead ruri.           </p>"},{"location":"en/quickstart/#use-rootfstooldiscarded","title":"Use rootfstool\uff08Discarded\uff09\uff1a","text":"<p>Get alpine edge image:     <pre><code>git clone https://github.com/Moe-hacker/rootfstool\n./rootfstool/rootfstool download -d alpine -v edge\nmkdir test\nsudo tar -xvf rootfs.tar.xz -C test\nrm rootfs.tar.xz</code></pre></p>"},{"location":"en/quickstart/#set-up-dns","title":"Set up dns\uff1a","text":"<pre><code>sudo rm test/etc/resolv.conf\necho nameserver 1.1.1.1|sudo tee test/etc/resolv.conf</code></pre>"},{"location":"en/quickstart/#run-container","title":"Run container\uff1a","text":"<pre><code>sudo ./ruri ./test</code></pre>"},{"location":"en/quickstart/#thats-all","title":"That's all.","text":""},{"location":"zh/","title":"\u6b22\u8fce\u6765\u5230ruri\u5b98\u65b9wiki","text":""},{"location":"zh/#_1","title":"\u76ee\u5f55:","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u65e5\u5e38\u4f7f\u7528 </li> <li>\u5bb9\u5668\u5b89\u5168</li> <li>\u6302\u8f7d\u7cfb\u7edf\u8d44\u6e90</li> </ul>"},{"location":"zh/#ruri","title":"\u5173\u4e8eruri\uff1a","text":"<p>\u2003ruri(Lightweight, User-friendly Linux-container Implementation)\u662f\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684chroot/unshare Linux\u5bb9\u5668\u5b9e\u73b0\uff0c\u4f7f\u7528C\u8bed\u8a00\u7f16\u5199\uff0c\u9759\u6001\u4e8c\u8fdb\u5236\u4ec5\u4e0d\u5230500k\uff0c\u5177\u6709\u76f8\u6bd4chroot/unshare\u547d\u4ee4\u589e\u5f3a\u7684\u5b89\u5168\u6027\uff0c\u66f4\u4e30\u5bcc\u7684\u914d\u7f6e\u9009\u9879\u548c\u66f4\u52a0\u7528\u6237\u53cb\u597d\u7684\u4f7f\u7528\u65b9\u5f0f\u3002     \u2003ruri\u8bd5\u56fe\u4e3a\u5185\u6838\u914d\u7f6e\u4e0d\u5b8c\u6574\u6216\u5185\u5b58\u5bb9\u91cf\u4e0d\u5145\u8db3\u7684\u8bbe\u5907\u63d0\u4f9b\u66f4\u52a0\u5b89\u5168\u65b9\u4fbf\u7684\u5bb9\u5668\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u66ff\u4ee3containerd/youki\u7b49OCI\u5bb9\u5668\u5b9e\u73b0\u3002      </p>"},{"location":"zh/common-usage/","title":"\u65e5\u5e38\u4f7f\u7528","text":""},{"location":"zh/common-usage/#_2","title":"\u5173\u4e8e\u6743\u9650\uff1a","text":"<p>ruri\u7684\u5927\u90e8\u5206\u529f\u80fd\u4f9d\u8d56root\u6743\u9650\uff08sudo\uff09\uff0c\u9664rootless\u90e8\u5206\u5916\u3002    </p>"},{"location":"zh/common-usage/#_3","title":"\u5b89\u5168\u505c\u6b62\u5bb9\u5668\uff1a","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528<code>-U [\u5bb9\u5668\u76ee\u5f55/\u914d\u7f6e\u6587\u4ef6]</code>\u6765\u5b89\u5168\u7684\u5378\u8f7d\u5bb9\u5668\u5e76\uff08\u5c3d\u53ef\u80fd\uff09\u6740\u6b7b\u5bb9\u5668\u8fdb\u7a0b\u3002       </p>"},{"location":"zh/common-usage/#unshare","title":"\u5f00\u542funshare\uff1a","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528<code>-u</code>\u9009\u9879\u6765\u5f00\u542funshare\u529f\u80fd\uff0c\u8fd9\u901a\u5e38\u4e0d\u4f1a\u5f71\u54cd\u5bb9\u5668\u8fd0\u884c\u5e76\u5c06\u63d0\u4f9b\u66f4\u9ad8\u5b89\u5168\u6027\u3002      </p>"},{"location":"zh/common-usage/#capability","title":"capability\u63a7\u5236\uff1a","text":"<p>ruri\u5185\u7f6e\u4e86capability\u63a7\u5236\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7<code>-k capability</code>\u6765\u4fdd\u7559\u67d0\u4e2acpability\uff0c\u4f7f\u7528<code>-d capability</code>\u6765\u79fb\u9664\u3002\u6ce8\u610fcapability\u5e94\u8be5\u5168\u90e8\u5c0f\u5199\u3002       </p>"},{"location":"zh/common-usage/#_4","title":"\u6302\u8f7d\u5bbf\u4e3b\u673a\u76ee\u5f55\uff1a","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u50cf<code>-m /sdcard /sdcard</code>\u7684\u65b9\u5f0f\u6765\u6302\u8f7d\u5bbf\u4e3b\u673a\u76ee\u5f55\u8fdb\u5bb9\u5668\u3002      </p>"},{"location":"zh/common-usage/#_5","title":"\u7f51\u7edc\u95ee\u9898\uff1a","text":"<p>\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u50cf<code>temporary failure resolving xxxxx</code>\u6216<code>bad address xxxxx</code>\u7684\u9519\u8bef\u3002   \u53ef\u4ee5\u5c1d\u8bd5\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c\uff1a     <pre><code>rm /etc/resolv.conf\necho nameserver 1.1.1.1 &gt; /etc/resolv.conf</code></pre> \u6216\u8005\u5bf9\u4e8eAndroid\uff0c\u60a8\u53ef\u5c1d\u8bd5\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c https://github.com/Moe-hacker/daijin/raw/refs/heads/main/src/share/fixup.sh      </p>"},{"location":"zh/common-usage/#rootless","title":"\u5173\u4e8erootless\u5bb9\u5668\uff1a","text":"<p>\u5982\u679c\u5728\u5bb9\u5668\u4e2d\u9047\u5230 <code>Couldn't create temporary file /tmp/apt.conf.sIKx3J for passing config to apt-key</code> \u8fd9\u6837\u7684\u9519\u8bef\uff0c\u8bf7 <code>chmod 777 /tmp</code>\u3002  \u60a8\u9700\u8981\u5728\u5bbf\u4e3b\u673a\u4e0a\u5b89\u88c5 uidmap\u3002  \u60a8\u53ef\u80fd\u9700\u8981\u5728\u5bbf\u4e3b\u673a\u4e0a\u914d\u7f6e/etc/subuid\u548c/etc/subgid\u3002       </p>"},{"location":"zh/container-security/","title":"\u5982\u4f55\u589e\u5f3a\u5bb9\u5668\u5b89\u5168\uff1a","text":"<p>ruri\u63d0\u4f9b\u4e00\u7cfb\u5217\u5b89\u5168\u9009\u9879\uff0c\u4e0b\u9762\u662f\u5b83\u4eec\u7684\u4f7f\u7528\u8bf4\u660e\uff1a      </p>"},{"location":"zh/container-security/#_2","title":"\u65e5\u5e38\uff1a","text":""},{"location":"zh/container-security/#rootless","title":"\u4f7f\u7528rootless\u5bb9\u5668\uff1a","text":"<p>\u5728\u73b0\u4ee3\u7684GNU/Linux\u4e0a\uff0c\u4e00\u822c\u53ea\u8981\u914d\u7f6e\u597d/etc/subuid\u548c/etc/subgid\uff0c\u5b89\u88c5uidmap\uff08shadow\uff09\u5305\uff0c\u5373\u53ef\u4f7f\u7528rootless\u5bb9\u5668\u3002     \u5982\u679c\u4f60\u7684\u8bbe\u5907\u652f\u6301\uff0c\u53ef\u4ee5\u4f7f\u7528<code>-r</code>\u9009\u9879\u6765\u4ee5\u666e\u901a\u7528\u6237\u8fd0\u884c\u65e0\u7279\u6743\u5bb9\u5668\u3002      </p>"},{"location":"zh/container-security/#_3","title":"\u4f7f\u7528\u666e\u901a\u7528\u6237\uff1a","text":"<p>\u5982\u679c\u4f60\u7684\u8bbe\u5907\u4e0d\u652f\u6301\uff0c\u4f60\u8fd8\u6709\u4e00\u4e2a\u9009\u9879\uff0c\u5728\u5bb9\u5668\u4e2d\u521b\u5efa\u4e00\u4e2a\u666e\u901a\u7528\u6237\uff0c\u5e76\u4f7f\u7528<code>-E username</code>\u9009\u9879\u6765\u4f7f\u7528\u666e\u901a\u7528\u6237\u5728\u5bb9\u5668\u4e2d\u8fd0\u884c\u547d\u4ee4\u3002\u8bf7\u786e\u4fddusername\u5728\u5bb9\u5668\u7684/etc/passwd\u4e2d\u6709\u6b63\u786e\u8bb0\u5f55\u3002     \u5982\u679c\u4f60\u4e0d\u9700\u8981\u4f7f\u7528sudo\uff0c\u53ef\u4ee5\u540c\u65f6\u5f00\u542fno_new_privs\uff08<code>-n</code>\uff09\u9009\u9879\u3002      </p>"},{"location":"zh/container-security/#unshare","title":"\u5f00\u542funshare\uff1a","text":"<p>ruri\u652f\u6301\u9664\u7f51\u7edc\u5916\u7684\u5e38\u7528\u547d\u540d\u7a7a\u95f4\uff08\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\u4ec5\u7528\u4e8e\u7981\u7528\u7f51\u7edc\uff09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>-u</code>\u9009\u9879\u5c1d\u8bd5\u5f00\u542f\u652f\u6301\u7684\u547d\u540d\u7a7a\u95f4\u3002     unshare\u529f\u80fd\u81f3\u5c11\u4f9d\u8d56mount ns\uff0c\u5e76\u4f1a\u9ed8\u8ba4\u4f7f\u7528pivot_root(2)\u6765\u66ff\u4ee3chroot(2)\u6765\u63d0\u4f9b\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u3002      </p>"},{"location":"zh/container-security/#capabilities","title":"Capabilities\uff08\u6743\u9650\u96c6\u5408\uff09\uff1a","text":"<p>ruri\u652f\u6301Linux\u7684capability\u63a7\u5236\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>-d cap/num</code>\u6765\u79fb\u9664\u4e00\u4e2acapability\uff0c<code>-k</code>\u6765\u4fdd\u7559\u3002     ruri\u9ed8\u8ba4\u5df2\u7ecf\u79fb\u9664\u4e86\u5927\u90e8\u5206\u53ef\u80fd\u5371\u5bb3\u5bbf\u4e3b\u673a\u7684capability\uff0c\u4f46\u5982\u679c\u4f60\u6709\u5176\u4ed6\u4e0d\u9700\u8981\u7684\u7279\u6743\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u79fb\u9664\u3002      </p>"},{"location":"zh/container-security/#rurienv","title":"\u5173\u95ed.rurienv\u652f\u6301\uff1a","text":"<p>ruri\u9ed8\u8ba4\u4f1a\u5728\u5bb9\u5668\u4e2d\u521b\u5efa<code>/.rurienv</code>\u6765\u7edf\u4e00\u5bb9\u5668\u914d\u7f6e\uff0c\u8fd9\u4efd\u914d\u7f6e\u6587\u4ef6\u901a\u8fc7\u8bbe\u7f6e\u53ea\u8bfb\u5c5e\u6027\uff08immutable\uff09\u548c\u79fb\u9664\u5bb9\u5668\u4fee\u6539\u6b64\u5c5e\u6027\u7684\u7279\u6743\uff08CAP_LINUX_IMMUTABLE\uff09\u6765\u4fdd\u8bc1\u5b89\u5168\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd8\u4e0d\u591f\u5b89\u5168\uff0c\u53ef\u4ee5\u4f7f\u7528<code>-N</code>\u9009\u9879\u7981\u7528\u6b64\u6587\u4ef6\u3002     </p>"},{"location":"zh/container-security/#cpu","title":"\u8bbe\u7f6e\u5185\u5b58/cpu\u9650\u5236:","text":"<p>ruri\u652f\u6301cgroup\u7684memory/cpu/cpuset\u63a7\u5236\u7ec4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>-l</code>\u9009\u9879\u6765\u8bbe\u7f6e\u8fd9\u4e9b\u9650\u5236\u3002      </p>"},{"location":"zh/container-security/#_4","title":"\u6302\u8f7d\u5916\u90e8\u6302\u8f7d\u70b9\u4e3a\u53ea\u8bfb:","text":"<p>ruri\u652f\u6301\u6302\u8f7d\u5916\u90e8\u6302\u8f7d\u70b9\u4e3a\u53ea\u8bfb\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u8bbf\u95ee\u6587\u4ef6\u800c\u4e0d\u9700\u8981\u4fee\u6539\uff0c\u8bf7\u4f7f\u7528<code>-M</code>\u9009\u9879\u6765\u4ee3\u66ff<code>-m</code>\u9009\u9879\u3002      </p>"},{"location":"zh/container-security/#seccomp","title":"\u5f00\u542fseccomp\uff1a","text":"<p>ruri\u5185\u7f6e\u4e86\u4e00\u4efd\u9ed1\u540d\u5355\u6a21\u5f0fseccomp\u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>-s</code>\u9009\u9879\u6765\u5f00\u542f\u5b83\u3002      </p>"},{"location":"zh/container-security/#_5","title":"\u6781\u5ba2:","text":""},{"location":"zh/container-security/#seccomp_1","title":"\u81ea\u5df1\u7f16\u5199Seccomp\u914d\u7f6e\uff1a","text":"<p>ruri\u5185\u7f6e\u7684seccomp\u914d\u7f6e\u8db3\u4ee5\u5e94\u5bf9\u5927\u591a\u5a01\u80c1\uff0c\u4f46\u5982\u679c\u4f60\u9700\u8981\u66f4\u6fc0\u8fdb\u7684\u7b56\u7565\uff0c\u53ef\u4ee5\u624b\u52a8\u7f16\u8f91src/seccomp.c\u6765\u5199\u5165\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6\u3002      </p>"},{"location":"zh/container-security/#_6","title":"\u6fc0\u8fdb\uff1a","text":""},{"location":"zh/container-security/#hidepid","title":"Hidepid:","text":"<p>ruri\u652f\u6301\u4e3a/proc\u8bbe\u7f6ehidepid\u9009\u9879\uff0c\u4f7f\u7528<code>-i 1/2</code> \u6765\u5f00\u542f\u3002     </p>"},{"location":"zh/container-security/#no_new_privs","title":"\u5f00\u542fno_new_privs:","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528<code>-n</code>\u9009\u9879\u6765\u5f00\u542fNO_NEW_PRIVS,\u5f00\u542f\u540esudo\u7b49\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u8fd0\u884c\u3002      </p>"},{"location":"zh/container-security/#_7","title":"\u6302\u8f7d\u6839\u76ee\u5f55\u4e3a\u53ea\u8bfb\uff1a","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528<code>-R</code>\u9009\u9879\u6765\u4f7f\u6574\u4e2a\u5bb9\u5668\u6839\u76ee\u5f55\u53ea\u8bfb\u3002\u5f00\u542f\u540e\uff0c/sys\u548c/proc\u4e5f\u5c06\u4e3a\u5b8c\u5168\u53ea\u8bfb\u3002     </p>"},{"location":"zh/container-security/#_8","title":"\u7981\u7528\u7f51\u7edc\uff1a","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528<code>-x</code>\u9009\u9879\u6765\u5b8c\u5168\u7981\u7528\u5bb9\u5668\u7f51\u7edc\uff0c\u8fd9\u9700\u8981NET\u547d\u540d\u7a7a\u95f4\uff0c\u5e76\u4f1a\u81ea\u52a8\u5f00\u542funshare\u3002      </p>"},{"location":"zh/container-security/#_9","title":"\u9ed8\u8ba4\u5b89\u5168\u4fdd\u62a4\uff1a","text":"<p>ruri\u9ed8\u8ba4\u8fd8\u63d0\u4f9b\u5982\u4e0b\u5b89\u5168\u9632\u62a4\uff1a      </p> <ul> <li>/dev\u4e0b\u53ea\u521b\u5efa\u5fc5\u987b\u6587\u4ef6      </li> <li>/sys\u548c/proc\u4e0b\u90e8\u5206\u654f\u611f\u76ee\u5f55/\u6587\u4ef6\u4e3a\u53ea\u8bfb\uff0c\u90e8\u5206\u88ab\u76f4\u63a5\u5c4f\u853d      </li> <li>\u79fb\u9664\u5927\u90e8\u5206\u53ef\u80fd\u5bfc\u81f4\u5371\u5bb3\u5bbf\u4e3b\u673a\u7684\u7279\u6743      </li> </ul>"},{"location":"zh/mount-resources/","title":"\u6302\u8f7d\u7cfb\u7edf\u8d44\u6e90","text":""},{"location":"zh/mount-resources/#_2","title":"\u6302\u8f7d\u6587\u4ef6\uff1a","text":"<p>ruri\u5185\u7f6e\u5f3a\u5927\u7684\u6302\u8f7d\u53c2\u6570\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528<code>-m</code>\u6765\u6302\u8f7d\u6587\u4ef6\uff0c<code>-M</code>\u6765\u53ea\u8bfb\u6302\u8f7d\u3002       </p>"},{"location":"zh/mount-resources/#_3","title":"\u76ee\u5f55\uff1a","text":"<p>\u4f8b\u5982\uff0c<code>-m /sdcard /sdcard</code>\u6765\u6302\u8f7d\u5bbf\u4e3b\u673a/sdcard\u5230\u5bb9\u5668\u7684/sdcard\uff0c\u5f53\u7136\u8fd9\u5e76\u4e0d\u5b89\u5168\uff0c\u63a8\u8350\u7684\u65b9\u5f0f\u662f\u901a\u8fc7<code>-M /sdcard /sdcard</code>\u6765\u5b9e\u73b0\u53ea\u8bfb\u6302\u8f7d\u3002      </p>"},{"location":"zh/mount-resources/#_4","title":"\u5757\u8bbe\u5907\uff1a","text":"<p>\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528<code>-m /dev/sda /mnt</code>\u6302\u8f7d/dev/sda\u5230/mnt\u3002     </p>"},{"location":"zh/mount-resources/#_5","title":"\u955c\u50cf\u6587\u4ef6\uff1a","text":"<p>\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528<code>-m ./1.img /mnt</code>\u6302\u8f7d./1.img\u5230/mnt\u3002      </p>"},{"location":"zh/mount-resources/#_6","title":"\u6839\u76ee\u5f55\uff1a","text":"<p>\u4f7f\u7528<code>-m \u8d44\u6e90 /</code>\u6765\u9884\u5148\u6302\u8f7d\u6839\u76ee\u5f55\uff0c\u4f8b\u5982\uff0c<code>-m ./rootfs.img /</code>\u53ef\u4ee5\u5c06./rootfs.img\u6302\u8f7d\u4e3a\u5bb9\u5668\u6839\u76ee\u5f55\u3002       </p>"},{"location":"zh/mount-resources/#_7","title":"\u5176\u4ed6\u6587\u4ef6\uff1a","text":"<p>ruri\u652f\u6301\u5355\u4e2a\u6587\u4ef6\u6302\u8f7d\uff0c\u5982<code>-m /tmp/1.sock /tmp/1.sock</code>\u7406\u8bba\u4e0a\u4e5f\u662f\u53ef\u884c\u7684\u3002      </p>"},{"location":"zh/mount-resources/#_8","title":"\u6dfb\u52a0\u5b57\u7b26\u8bbe\u5907\uff1a","text":"<p>ruri\u652f\u6301\u4f7f\u7528<code>-I \u6587\u4ef6\u540d \u4e3b\u8bbe\u5907\u53f7 \u6b21\u8bbe\u5907\u53f7</code>\u6765\u5728/dev\u4e0b\u6dfb\u52a0\u5b57\u7b26\u8bbe\u5907\uff0c\u4f8b\u5982<code>-I kvm 10 232</code>\u6216<code>-I dri/card0 226 0</code>\u3002      </p>"},{"location":"zh/quickstart/","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/quickstart/#ruri","title":"\u4e0b\u8f7druri\uff1a","text":"<p>ruri\u4e3aarm64, armv7, armhf, riscv64, i386, loong64, s390x, ppc64le\u548cx86_64\u5e73\u53f0\u63d0\u4f9b\u5b98\u65b9\u4e8c\u8fdb\u5236\uff0c\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u81ea\u52a8\u4e0b\u8f7d\u4e8c\u8fdb\u5236\u4e3a./ruri:      <pre><code>wget -q -O - https://getruri.crack.moe | bash -s -- -s</code></pre></p>"},{"location":"zh/quickstart/#rootfs","title":"\u83b7\u53d6\u4e00\u4e2arootfs\uff1a","text":""},{"location":"zh/quickstart/#rurima","title":"\u4f7f\u7528rurima\uff08\u63a8\u8350\uff09\uff1a","text":"<p>\u83b7\u53d6alpine edge\u955c\u50cf:    <pre><code>wget -q -O - https://getrurima.crack.moe | bash -s -- -s\nsudo ./rurima lxc pull -o alpine -v edge -s ./test </code></pre> BTW, rurima\u5df2\u7ecf\u5b8c\u6574\u5185\u7f6e\u4e86ruri\uff0c\u6240\u4ee5\u4e8b\u5b9e\u4e0a\u5927\u5bb6\u53ea\u9700\u8981\u4e00\u4e2arurima\u7136\u540e<code>rurima r</code>\u5c31\u80fd\u8c03\u7528ruri\u3002     \u6240\u4ee5\u6211\u4eec\u8fd8\u4e0b\u8f7druri\u5e72\u4ec0\u4e48\u5462 </p>"},{"location":"zh/quickstart/#rootfstool","title":"\u4f7f\u7528rootfstool\uff08\u5df2\u5e9f\u5f03\uff09\uff1a","text":"<p>\u83b7\u53d6alpine edge\u955c\u50cf:     <pre><code>git clone https://github.com/Moe-hacker/rootfstool\n./rootfstool/rootfstool download -d alpine -v edge\nmkdir test\nsudo tar -xvf rootfs.tar.xz -C test\nrm rootfs.tar.xz</code></pre></p>"},{"location":"zh/quickstart/#dns","title":"\u914d\u7f6edns\uff1a","text":"<pre><code>sudo rm test/etc/resolv.conf\necho nameserver 1.1.1.1|sudo tee test/etc/resolv.conf</code></pre>"},{"location":"zh/quickstart/#_2","title":"\u8fd0\u884c\u5bb9\u5668\uff1a","text":"<pre><code>sudo ./ruri ./test</code></pre>"},{"location":"zh/quickstart/#_3","title":"\u5b8c\u7ed3\u6492\u82b1\uff5e","text":""}]}